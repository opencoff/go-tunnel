# new style conf file

# root dir for relative file paths
confdir /etc/go-tunnel

# log /path/to/file INFO
log STDOUT DEBUG

# depriv ourselves
uid nobody gid nobody


# Terminate a local socks server and tunnel requests through a
# single quic connection. This is many to one port tunneling
# Syntax: proto socks [udp range]
listen socks eth0:2080 udp 5000-6000
    timeout TIMEOUT-A ratelimit RL-A
    connect quic server.name:9080 from ip.addr.ess
# or:
#   connect quic server.name:9080 pki PKI-X from ip.addr.ess

# Remote: listen on quic (port 9080) and connect dynamically
# the dest proto:name:port or proto:addr:port will be the first
# packet of every quic stream.
listen quic server.name:9080 pki PKI-X
    timeout TIMEOUT-X ratelimit RL-X
    connect dynamic from ip.addr.es

# Same as above - but listen on tcp:9080 via TLS; first few bytes
# of each connection will have the proto:addr:port as the first
# message.
listen tls server.name:9080 pki PKI-X
    timeout TIMEOUT-X ratelimit RL-X
    connect dynamic from ip.addr.es

# stunnel like TLS tunneling
listen tcp local.ip:8000 acl ACL-A
    connect tls server.name:443 pki m-TLS

listen tls server.name:443 pki m-TLS-Server
    connect tcp downstream.ip:8000 proxy-proto-v2 from ip.addr.es


timeout TIMEOUT-A connect 2s
               read 3s
               write 4s

ratelimit RL-A 200 per-ip 10 cache 3000


acl ACL-A allow { 127.0.0.1/8, 11.0.1.0/24, 11.0.2.0/24 }
          deny  { }


# presence of client-ca implies that this pki config requires
# client-ca
pki CERT-A cert /path/to/xyz
           key /path/to/key
           ca /path/to/ca
           client-ca /path/to/client-ca

pki CERT-B cert /path/to/abc.crt
           key /path/to/def.key
           ca /path/to/ca.crt

# in the future
#pki CERT-AUTO auto-cert auto-cert-config
